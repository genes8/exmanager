{"ast":null,"code":"const AUTH_TOKEN_KEY = 'expense_auth_token';\nconst USER_DATA_KEY = 'expense_user_data';\nexport const authService = {\n  // Store authentication data\n  setAuth: (token, user) => {\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(user));\n  },\n  // Get stored token\n  getToken: () => {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  },\n  // Get stored user data\n  getUser: () => {\n    const userData = localStorage.getItem(USER_DATA_KEY);\n    return userData ? JSON.parse(userData) : null;\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    const user = localStorage.getItem(USER_DATA_KEY);\n    return !!(token && user);\n  },\n  // Clear authentication data\n  logout: () => {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_DATA_KEY);\n  },\n  // Get authorization headers for API calls\n  getAuthHeaders: () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  }\n};\nexport default authService;","map":{"version":3,"names":["AUTH_TOKEN_KEY","USER_DATA_KEY","authService","setAuth","token","user","localStorage","setItem","JSON","stringify","getToken","getItem","getUser","userData","parse","isAuthenticated","logout","removeItem","getAuthHeaders","Authorization"],"sources":["/app/frontend/src/utils/auth.js"],"sourcesContent":["const AUTH_TOKEN_KEY = 'expense_auth_token';\nconst USER_DATA_KEY = 'expense_user_data';\n\nexport const authService = {\n  // Store authentication data\n  setAuth: (token, user) => {\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(user));\n  },\n\n  // Get stored token\n  getToken: () => {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  },\n\n  // Get stored user data\n  getUser: () => {\n    const userData = localStorage.getItem(USER_DATA_KEY);\n    return userData ? JSON.parse(userData) : null;\n  },\n\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    const user = localStorage.getItem(USER_DATA_KEY);\n    return !!(token && user);\n  },\n\n  // Clear authentication data\n  logout: () => {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_DATA_KEY);\n  },\n\n  // Get authorization headers for API calls\n  getAuthHeaders: () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n};\n\nexport default authService;\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,oBAAoB;AAC3C,MAAMC,aAAa,GAAG,mBAAmB;AAEzC,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,OAAO,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxBC,YAAY,CAACC,OAAO,CAACP,cAAc,EAAEI,KAAK,CAAC;IAC3CE,YAAY,CAACC,OAAO,CAACN,aAAa,EAAEO,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;EAC3D,CAAC;EAED;EACAK,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAOJ,YAAY,CAACK,OAAO,CAACX,cAAc,CAAC;EAC7C,CAAC;EAED;EACAY,OAAO,EAAEA,CAAA,KAAM;IACb,MAAMC,QAAQ,GAAGP,YAAY,CAACK,OAAO,CAACV,aAAa,CAAC;IACpD,OAAOY,QAAQ,GAAGL,IAAI,CAACM,KAAK,CAACD,QAAQ,CAAC,GAAG,IAAI;EAC/C,CAAC;EAED;EACAE,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMX,KAAK,GAAGE,YAAY,CAACK,OAAO,CAACX,cAAc,CAAC;IAClD,MAAMK,IAAI,GAAGC,YAAY,CAACK,OAAO,CAACV,aAAa,CAAC;IAChD,OAAO,CAAC,EAAEG,KAAK,IAAIC,IAAI,CAAC;EAC1B,CAAC;EAED;EACAW,MAAM,EAAEA,CAAA,KAAM;IACZV,YAAY,CAACW,UAAU,CAACjB,cAAc,CAAC;IACvCM,YAAY,CAACW,UAAU,CAAChB,aAAa,CAAC;EACxC,CAAC;EAED;EACAiB,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMd,KAAK,GAAGE,YAAY,CAACK,OAAO,CAACX,cAAc,CAAC;IAClD,OAAOI,KAAK,GAAG;MAAEe,aAAa,EAAE,UAAUf,KAAK;IAAG,CAAC,GAAG,CAAC,CAAC;EAC1D;AACF,CAAC;AAED,eAAeF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}